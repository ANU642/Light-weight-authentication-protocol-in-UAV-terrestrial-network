function phase1_registration()
    % UAV and NCC Registration Initialization
    IDU = 'UAV_123';                % Unique UAV identifier
    PIDU = 'PID_8332';              % Pseudonymous UAV identity (PIDU)
    CU = 9152;                      % Challenge (CU) generated by NCC
    PubNCC = 'PublicKey_NCC';       % Public key of NCC for secure communication

    % Start timestamp
    start_time = datetime('now', 'Format', 'yyyy-MM-dd HH:mm:ss');
    disp(['Registration Started at: ', char(start_time)]);

    % Display initial registration details
    disp('--- Phase 1: Registration ---');
    disp(['IDU: ', IDU]);
    disp(['PIDU: ', PIDU]);
    disp(['CU (Challenge): ', num2str(CU)]);
    disp(['PubNCC (Public Key): ', PubNCC]);

    % Generate PUF response (given as 4064 in your results)
    RU = 4064; 
    disp(['PUF Response (RU): ', num2str(RU)]);

    % Simulation of registration request processing
    send_request_time = datetime('now', 'Format', 'yyyy-MM-dd HH:mm:ss');
    disp('UAV -> NCC: Sending Registration Request...');
    pause(1);  % Simulate request delay

    processing_time = datetime('now', 'Format', 'yyyy-MM-dd HH:mm:ss');
    disp('NCC -> UAV: Processing Registration Request...');
    pause(1);  % Simulate processing delay

    auth_response_time = datetime('now', 'Format', 'yyyy-MM-dd HH:mm:ss');
    disp('NCC -> UAV: Sending Authentication Response...');
    disp('NCC: Verifying PUF Response...');
    pause(1);  % Simulate verification delay

    % Verify PUF Response for authentication
    if RU == 4064  % Since the PUF response matches, it's successful
        disp('Authentication Successful!');
    else
        disp('Authentication Failed!');
        return;
    end

    % End timestamp and calculate registration duration
    end_time = datetime('now', 'Format', 'yyyy-MM-dd HH:mm:ss');
    disp(['Registration Completed at: ', char(end_time)]);

    % Calculate and display total registration duration
    total_duration = seconds(end_time - start_time);
    disp(['Total Duration: ', num2str(total_duration), ' seconds']);

    % Registration Time Check (Within Normal Timeframe)
    if total_duration > 5  % Threshold for attack detection
        disp('WARNING: Potential attack detected! Registration took too long.');
    else
        disp('Registration completed within normal timeframe.');
    end

    % Save data and logs
    save('registration_data.mat', 'IDU', 'PIDU', 'CU', 'RU', 'PubNCC');
    log_file = 'registration_log.txt';
    log_data = [
        'Registration Start: ', char(start_time), newline, ...
        'IDU: ', IDU, newline, ...
        'PIDU: ', PIDU, newline, ...
        'CU (Challenge): ', num2str(CU), newline, ...
        'PUF Response (RU): ', num2str(RU), newline, ...
        'Total Duration: ', num2str(total_duration), ' seconds', newline, ...
        'Authentication Status: Successful', newline, ...
        'Registration End: ', char(end_time), newline, ...
        '-------------------------------------', newline
    ];
    fid = fopen(log_file, 'a');
    fprintf(fid, log_data);
    fclose(fid);

    disp('Registration and logs saved.');
end
